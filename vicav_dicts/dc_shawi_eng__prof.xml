<profile when="2022_04_28_11_18_54" xml:id="dictProfile" xml:space="preserve">
<basexRest>https://shawi.acdh-ch-dev.oeaw.ac.at</basexRest>

<displayString>/concat(
(tei:form[1]/tei:orth)[1],
(tei:quote)[1],
" [",
(tei:gramGrp[1]/tei:gram[@type="pos"])[1],
"]"
)</displayString>

<entryStyle>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns="http://www.w3.org/1999/xhtml"
   xmlns:tei="http://www.tei-c.org/ns/1.0" version="3.0">
    <xsl:output method="html"/>
    <xsl:param name="referencedEntriesSerialized" as="xs:string" select="'&lt;_ xmlns=&quot;&quot;/&gt;'"/>
    <xsl:param name="referencedEntries" select="parse-xml-fragment($referencedEntriesSerialized)"/>
   <xsl:template match="tei:entry">     
         <xsl:if test="not(//tei:gram[@type='synRoot']) and //tei:entry">
            <span style="color:red">No synRoot</span><br/>
         </xsl:if>
         <xsl:if test="not(//tei:gram[@type='diaRoot']) and //tei:entry">
            <span style="color:red">No diaRoot</span><br/>
         </xsl:if>
         <xsl:if test="string-length(//tei:gram[@type='pos'])&lt;1 and //tei:entry">
            <span style="color:red">No pos</span><br/>
         </xsl:if>
         
         <table width="600px">
            <xsl:apply-templates select="tei:form[@type='lemma'] | tei:form[@type='multiWordUnit']"/>
            <xsl:apply-templates select="tei:form[@type='stem'] | tei:form[@type='inflected']"/>                        
            <xsl:apply-templates select="tei:sense"/>
            <xsl:apply-templates select="tei:fs"/>
         </table>
   </xsl:template>

   <xsl:template match="tei:form[@type='stem'] | tei:form[@type='inflected'] ">
      <tr>
         <td class="tdHead">
            <xsl:if test="@type='stem'">Stem</xsl:if>
            <xsl:if test="@type='inflected'">Infl.</xsl:if>
         </td>
         <td class="tdTrans">
            <xsl:if test="tei:orth"><xsl:value-of select="tei:orth"/>
            </xsl:if>  
            <xsl:choose>
               <xsl:when test="@ana='#n_pl'"><span class="gramGrp">[plural]</span>
               </xsl:when>
               <xsl:when test="@ana='#n_f'"><span class="gramGrp">[feminine]</span>
               </xsl:when>
               <xsl:when test="@ana='#adj_f'"><span class="gramGrp">[feminine]</span>
               </xsl:when>
               <xsl:when test="@ana='#adj_pl'"><span class="gramGrp">[plural]</span>
               </xsl:when>
               <xsl:when test="@ana='#v_pres_sg_p3'"><span class="gramGrp">[present tense]</span>
               </xsl:when>
               <xsl:otherwise><span class="gramGrp">[<xsl:value-of select="@ana"/>]</span>
               </xsl:otherwise>
            </xsl:choose>
            
            <xsl:for-each select="tei:form[@type='variant']">
               <tr>
                  <td class="tdHead">   (var.)</td>
                  <td>
                     <xsl:if test="tei:orth"><span class="trans"><xsl:value-of select="tei:orth"/>
                     </span>
                     </xsl:if>
                     
                     <xsl:choose>
                        <xsl:when test="@ana='#n_pl'"><span class="gramGrp">[plural]</span>
                        </xsl:when>
                        <xsl:when test="@ana='#adj_f'"><span class="gramGrp">[feminine]</span>
                        </xsl:when>
                        <xsl:when test="@ana='#adj_pl'"><span class="gramGrp">[plural]</span>
                        </xsl:when>
                        <xsl:when test="@ana='#v_pres_sg_p3'"><span class="gramGrp">[present tense]</span>
                        </xsl:when>
                     </xsl:choose>
                  </td>
               </tr>
               
            </xsl:for-each>
            
         </td>
      </tr>      
   </xsl:template>
   
   <xsl:template match="tei:sense">
      <tr>
         <td class="tdSenseHead">
            <xsl:if test="tei:gramGrp/tei:gram"><xsl:value-of select="tei:gramGrp/tei:gram"/>
            </xsl:if>
         </td>
         
         <td class="tdSense">
            <xsl:for-each select="tei:def">
               <div class="dvDef">
                  <xsl:choose>
                     <xsl:when test="@xml:lang='de'"><span class="spDefGerm">(<xsl:value-of select="."/>)</span>
                     </xsl:when>
                     <xsl:when test="@xml:lang='tr'"><span class="spDefTurk">(<xsl:value-of select="."/>)</span>
                     </xsl:when>
                     <xsl:otherwise><span class="spDef">(<xsl:value-of select="."/>)</span>
                     </xsl:otherwise>
                  </xsl:choose>
                  
               </div>
            </xsl:for-each>
            
            <xsl:for-each select="tei:cit[@type='translation']">
               <div class="dvDef">
                  <xsl:choose>
                     <xsl:when test="@xml:lang='de'"><span class="spTransGerm"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if>
                     </span>
                     </xsl:when>
                     <xsl:when test="@xml:lang='tr'"><span class="spDefTurk"><xsl:value-of select="tei:quote"/>
                     </span>
                     </xsl:when>
                     <xsl:otherwise><span class="spTrans"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if>
                     </span>
                     </xsl:otherwise>
                  </xsl:choose>
                  
               </div>
            </xsl:for-each>
            
            <xsl:for-each select="tei:cit[@type='example']">
               <div class="dvExamples">
                  <xsl:choose>
                     <xsl:when test="@type='example'">
                        <xsl:if test="not(tei:fs/tei:f/tei:symbol[@value='released'])"><b style="color:red">Not released: </b>
                        </xsl:if>
                        <span class="spExample">
                           <xsl:value-of select="tei:quote"/><i class="iTransEn">  <xsl:value-of select="tei:cit[@xml:lang='en']/tei:quote"/>
                           </i>
                           <i class="iTransDe">  <xsl:value-of select="tei:cit[@xml:lang='de']/tei:quote"/>
                           </i>
                        </span>
                     </xsl:when>
                     
                     <xsl:when test="@type='multiWordUnit'">
                        <span class="spMWU"><xsl:value-of select="tei:form/tei:orth"/><i class="iTrans">  <xsl:value-of select="tei/sense/tei:cit/tei:quote"/>
                        </i>
                        </span>
                     </xsl:when>
                  </xsl:choose>
               </div>
            </xsl:for-each>
         </td>         
         <xsl:apply-templates select="tei:usg"/>
      </tr>     
      <xsl:apply-templates select="tei:cit[@type='translationEquivalent']|tei:ref"/>
   </xsl:template>
   
   <xsl:template match="tei:cit[@type='translationEquivalent']">
      <tr>
         <td class="tdSenseHead"><xsl:value-of select="@xml:lang"/></td>
         <td><xsl:value-of select="tei:form/tei:orth"/></td>
      </tr>
   </xsl:template>
   
   <xsl:template match="tei:cit[@type='translation']">
      <tr>
         <td class="tdSenseHead"><xsl:value-of select="@xml:lang"/></td>
         <td>
            <xsl:choose>
               <xsl:when test="@xml:lang='de'"><span class="spTransGerm"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if>
               </span>
               </xsl:when>
               <xsl:otherwise><span class="spTrans"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if>
               </span>
               </xsl:otherwise>
            </xsl:choose>
         </td>
      </tr>
   </xsl:template>
   
   <xsl:template match="tei:form[@type='lemma'] | tei:form[@type='multiWordUnit'] ">
      <tr>
         <td class="tdHead">Lemma</td>
         <td>
            <xsl:value-of select="tei:orth"/><xsl:text> </xsl:text>
            
            <xsl:if test="../tei:gramGrp/tei:gram[@type='pos']">
               <span class="gramGrp">[<xsl:value-of select="../tei:gramGrp/tei:gram[@type='pos']"/>]</span>
            </xsl:if>
            
            <xsl:if test="tei:usg/tei:placeName">
               <span class="spPlaceName"> (<xsl:value-of select="tei:usg/tei:placeName"/>)</span>
            </xsl:if>
            
            <xsl:for-each select="tei:form[@type='variant']">
               <tr>
                  <td class="tdHead">Lemma (var.)</td>
                  <td>
                     <xsl:if test="tei:orth"><xsl:value-of select="tei:orth"/>
                     </xsl:if> 
                     <xsl:choose>
                        <xsl:when test="@ana='#n_pl'"><span class="gramGrp">[plural]</span>
                        </xsl:when>
                        <xsl:when test="@ana='#v_pres_sg_p3'"><span class="gramGrp">[present tense]</span>
                        </xsl:when>
                     </xsl:choose>
                  </td>
               </tr>
            </xsl:for-each>
         </td>
      </tr>
      
      <xsl:if test="string-length(//tei:gram[@type='subc'])">
         <tr>
            <td class="tdHead">Subcat.</td>
            <td><xsl:value-of select="//tei:gram[@type='subc']"/>
            </td>
         </tr>
      </xsl:if>
      
      <xsl:if test="string-length(//tei:gram[@type='morphPatternSg'])">
         <tr>
            <td class="tdHead">morphPatSg</td>
            <td><xsl:value-of select="//tei:gram[@type='morphPatternSg']"/>
            </td>
         </tr>
      </xsl:if>
      
      <xsl:if test="string-length(//tei:gram[@type='morphPatternPl'])">
         <tr>
            <td class="tdHead">morphPatPl</td>
            <td><xsl:value-of select="//tei:gram[@type='morphPatternPl']"/>
            </td>
         </tr>
      </xsl:if>
      
      <xsl:if test="string-length(//tei:gram[@type='synRoot'])">
         <tr>
            <td class="tdHead">synRoot</td>
            <td><xsl:value-of select="//tei:gram[@type='synRoot']"/>
            </td>
         </tr>
      </xsl:if>
      <xsl:if test="string-length(//tei:gram[@type='diaRoot'])">
         <tr>
            <td class="tdHead">diaRoot</td>
            <td><xsl:value-of select="//tei:gram[@type='diaRoot']"/>
            </td>
         </tr>
      </xsl:if>
      <xsl:if test="string-length(//tei:gram[@type='root'])">
         <tr>
            <td class="tdHead">root</td>
            <td><xsl:value-of select="//tei:gram[@type='root']"/>
            </td>
         </tr>
      </xsl:if>
   </xsl:template>

   <xsl:template match="tei:usg[@type='geographic']">
      <xsl:for-each select="tei:name">
         <tr>
            <td><xsl:value-of select="@type"/></td>
            <td><xsl:value-of select="."/></td>
         </tr>
      </xsl:for-each>
   </xsl:template>   

   <xsl:template match="tei:usg">
      <div class="dvUsg"><xsl:value-of select="."/>
      </div>
   </xsl:template>
   
   <xsl:template match="tei:quote">
      <tr>
         <td><xsl:value-of select="../@type"/></td>
         <td><xsl:value-of select="."/></td>
      </tr>
   </xsl:template>
   
   <xsl:template match="tei:fs[1]">
      <tr>
         <xsl:choose>
            <xsl:when test="../@type">
               <td class="tdHead">Editors (<xsl:value-of select="../@type"/>)</td>
            </xsl:when>
            <xsl:otherwise>
               <td class="tdHead">Editors</td>
            </xsl:otherwise>
         </xsl:choose>
         
         <td>
            <xsl:for-each select="../tei:fs">
               <xsl:value-of select="tei:f[@name = 'who']/tei:symbol/@value"/> (<xsl:value-of
                  select="@type"/>): <xsl:value-of select="tei:f[@name = 'when']/tei:symbol/@value"/>
               <xsl:if test="tei:f[@name = 'status']">
                  <xsl:text> (</xsl:text><xsl:value-of
                     select="tei:f[@name = 'status']/tei:symbol/@value"/>) </xsl:if>
               <br/>
            </xsl:for-each>
         </td>
      </tr>
   </xsl:template>
   
   <!-- all the fs entries are handled above -->
   <xsl:template match="tei:fs"/>
   
   <xsl:template match="tei:cit">
      <table width="600px">
         <xsl:if test="//tei:usg/tei:placeName">
            <tr>
               <td class="tdHead">Placename: </td>
               <td>
                  <xsl:value-of select="tei:usg/tei:placeName"/>
               </td>
            </tr>
         </xsl:if>
         <xsl:apply-templates select="tei:cit[@type = 'translation']"/>
         <tr>
            <td colspan="2">
               <xsl:value-of select="tei:quote"/>
            </td>
         </tr>
         <xsl:apply-templates select="tei:fs"/>
      </table>
   </xsl:template>
   
   <xsl:template match="tei:ref[starts-with(@target, '#')]">
      <xsl:variable name="target" select="substring(@target, 2)"/>
      <xsl:apply-templates select="$referencedEntries/*[@xml:id = $target]/* "></xsl:apply-templates>
   </xsl:template>
   
   <xsl:template match="tei:div[@type='entry']">
     <xsl:apply-templates select="tei:cit"/>
     <xsl:apply-templates select="tei:entry"/>
   </xsl:template>
   
   <!-- How to render? Remove for now -->
   <xsl:template match="tei:listBibl"/>
   
   <xsl:template match="/">
      <div>
         <xsl:apply-templates select="tei:div[@type='entry']"/>
          <style type="text/css">
            @scope {
            table {
            border-collapse: collapse;
            background: white;
            }
            td {
            border: 1px solid black;
            padding-left: 5px;
            vertical-align: top;
            }
            
            .dvExamples {
            border: 1px solid black;
            background: rgb(210,210,255);
            }
            
            .dvArguments {
            border: 1px solid black;
            background: rgb(210,210,255);
            }
            
            .dvUsg {
            color: green;
            font-style: italic;
            }
            
            .tdHead {
            font-weight: bold;
            color: white;
            background: blue;
            padding-right: 5px;
            width: 100px;
            }
            
            .tdSenseHead {
            font-weight: bold;
            font-style: italic;
            color: blue;
            background: rgb(181,213,251);
            padding-right: 5px;
            width: 100px;
            text-align: right;
            }
            
            .tdSense {
            background: rgb(248,234,255);
            border-style: dotted;
            }
            
            .gramGrp {
            color: rgb(255,128,0);
            font-weight: bold;
            }
            
            .spArab {
            direction:rtl;
            }
            
            .spTrans {
            direction: rtl;
            font-style: italic;
            color: blue;
            }
            
            .spPlaceName {
            font-style: italic;
            color: green;
            }
            
            .spTransGerm {
            font-style: italic;
            color: rgb(180,180,180);
            }
            
            .spDef {
            font-style: italic;
            color: green;
            }
            
            .spDefGerm {
            font-style: italic;
            color: rgb(160,160,160);
            }
            
            .spDefTurk {
            font-style: italic;
            color: green;
            }
            
            .iTransEn {
            font-style: italic;
            color: green;
            }
            
            .iTransDe {
            font-style: italic;
            color: purple;
            }
            }
          </style>
      </div>
   </xsl:template>
</xsl:stylesheet>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  version="3.0">
  <xsl:output method="xml" indent="yes"/>
  <xsl:mode on-no-match="shallow-copy" />
  <xsl:param name="referencedEntriesSerialized" as="xs:string" select="'&lt;_ xmlns=&quot;&quot;/&gt;'"/>
  <xsl:param name="referencedEntries" select="parse-xml-fragment($referencedEntriesSerialized)"/>
  
  <xsl:template match="/">
    <_>
      <entry>
        <xsl:apply-templates/>
      </entry>
      <referencedEntries>
        <xsl:apply-templates select="$referencedEntries/*"/>
      </referencedEntries>
    </_>
  </xsl:template>
</xsl:stylesheet>
</entryStyle>
<entryTemplates>//*********************************************************//
//* ENTRY (lemma) - TEMPLATE ******************************//
//*********************************************************//
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_entry_001" xml:id="">
  <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">-</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote/>
      </cit>
    </sense>
 </entry>

<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_noun_001" xml:id="">
     <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#n_pl">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth> 
   </form>

   <gramGrp>
      <gram type="pos">noun</gram>
      <gram type="morphPatternSg" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="morphPatternPl" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote> </quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote> </quote>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote> </quote>
      </cit>
   </sense>
  </entry>
  
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_adjective_001" xml:id="">
   <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#a_f">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#a_pl">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">adjective</gram>
      <gram type="morphPatternSg" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="morphPatternPl" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav"/>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
   </sense>
</entry>

<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_verb_001" xml:id="">
   <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#v_pres_sg_p3">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">verb</gram>
      <gram type="subc">I</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav"/>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav"/>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
   </sense>
</entry>
 
    <entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_adverb_001" xml:id="">
   <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">adverb</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote/>
      </cit>

   </sense>
  </entry>
  
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_lvc_001" xml:id="">
   <form type="multiWordUnit">
    <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">lightVerbConstruction</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote>-</quote>

      </cit> <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
      
   </sense>

</entry>

//*********************************************************//
//* ENTRY (multiWordUnit) - TEMPLATE **********************//
//*********************************************************//
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_mwu_001" xml:id="">
   <form type="multiWordUnit">
     <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>
   
    <gramGrp>
    <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>
            
    <sense>
      <cit type="translation" xml:lang="en">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote>-</quote>

      </cit> <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
      
   </sense>

</entry>

//*********************************************************//
//* EXAMPLE - TEMPLATE ************************************//
//*********************************************************//
<cit xmlns="http://www.tei-c.org/ns/1.0" name="fa_example_001" xml:id="" type="example">
   <usg>
      <placeName>Harran-Urfa</placeName>
   </usg>

   <quote xml:lang="ar-acm-x-shawi-vicav">-</quote>
   
   <cit type="translation" xml:lang="en">
      <quote>-</quote>
   </cit>   

   <cit type="translation" xml:lang="de">
      <quote>-</quote>
   </cit>
                                       
</cit>


//******************************************************************//
//******************************************************************//
//******************************************************************//
</entryTemplates>
<entryTemplatesNamesXPath>//tei:entry | //tei:cit</entryTemplatesNamesXPath>


<IDXPath>//tei:form[@type="lemma"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] | //tei:cit[@type="example"]/tei:quote[@xml:lang="ar-acm-x-shawi-vicav"]  | //tei:form[@type="multiWordUnit"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] | /tei:cit/tei:quote[1] </IDXPath>
<IDCount>57</IDCount>




<lemmaXPath>//tei:form[@type="lemma"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] || //tei:form[@type="multiWordUnit"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] || //tei:cit[@type="example"]/tei:quote[@xml:lang="ar-acm-x-shawi-vicav"]</lemmaXPath>


<mainLangLabel>ar-acm-x-shawi-vicav</mainLangLabel>

<queryTemplates>
<!-- for public dictionaries it is assumed that there are no unreleased entries! -->
<!-- for subQuery .*x, x.* and .*x.* are replaced with ends-with(., x), starts-with(., x) and contains(., x) -->
<queryTemplate label="fuzzy">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics insensitive using case insensitive] | 
   collection($__db__)//tei:cit[@type='example']/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics insensitive using case insensitive]
</queryTemplate>

<queryTemplate label="anywhere">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive] | 
   collection($__db__)//tei:cit[@type='example']/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive]
</queryTemplate>

<queryTemplate label="lemma">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:form[@type='lemma']/tei:orth[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive] |
   collection($__db__)//tei:entry/tei:form[@type='multiWordUnit']/tei:orth[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive]
</queryTemplate>

<queryTemplate label="example">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:cit[@type='example']/tei:quote[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "en" using stemming] |
   collection($__db__)//tei:cit[@type='example']/tei:cit/tei:quote[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "en" using stemming]  
</queryTemplate>

<queryTemplate label="sense">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:sense/tei:cit/tei:quote[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "en" using stemming]
</queryTemplate>

<queryTemplate label="note">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:note[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "en" using stemming]
</queryTemplate>

<queryTemplate label="sid">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/@xml:id[{subQuery}]/.. | 
   collection($__db__)//tei:teiHeader/@xml:id[{subQuery}]/.. | 
   collection($__db__)//tei:cit/@xml:id[{subQuery}]/.. 
</queryTemplate>

<queryTemplate label="pos">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry[tei:gramGrp/tei:gram[@type='pos'][{subQuery}]]
</queryTemplate>

<!-- Example: pos=noun, root=ktb -->
<queryTemplate label="root">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry[tei:gramGrp[tei:gram[@type='root'][{subQuery}]]]
</queryTemplate>

<queryTemplate label="subc">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry[tei:gramGrp/tei:gram[@type='subc'][{subQuery}]]
</queryTemplate>

<!-- To find punctuation marks: ;,-->
<queryTemplate label="sense phrase">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:sense/tei:cit/tei:quote[contains(., {subQuery})]
</queryTemplate>                                  
                                                     
</queryTemplates>
<sortedDisplay>true</sortedDisplay>

<tableName label="dc_shawi_eng">dc_shawi_eng</tableName>
<specialCharacters><char><value>§</value></char><char><value>Ä</value></char><char><value>Ç</value></char><char><value>Ô</value></char><char><value>Ö</value></char><char><value>Ü</value></char><char><value>ß</value></char><char><value>à</value></char><char><value>á</value></char><char><value>â</value></char><char><value>ä</value></char><char><value>ç</value></char><char><value>è</value></char><char><value>é</value></char><char><value>ê</value></char><char><value>í</value></char><char><value>î</value></char><char><value>ï</value></char><char><value>ð</value></char><char><value>ô</value></char><char><value>ö</value></char><char><text><sup>q</sup></text><value>Q</value></char><char><value>ù</value></char><char><value>ú</value></char><char><value>û</value></char><char><value>ü</value></char><char><value>Ā</value></char><char><value>ā</value></char><char><value>č</value></char><char><value>Ē</value></char><char><value>ē</value></char><char><value>ğ</value></char><char><value>ġ</value></char><char><value>ī</value></char><char><value>İ</value></char><char><value>ı</value></char><char><value>ō</value></char><char><value>œ</value></char><char><value>Ş</value></char><char><value>ş</value></char><char><value>Š</value></char><char><value>š</value></char><char><value>ū</value></char><char><value>ž</value></char><char><value>ǝ</value></char><char><value>ǟ</value></char><char><value>Ǧ</value></char><char><value>ǧ</value></char><char><value>ȫ</value></char><char><value>ə</value></char><char><value>ʔ</value></char><char><value>ʕ</value></char><char><value>ʷ</value></char><char><value>ˀ</value></char><char><value>ˁ</value></char><char><value>́</value></char><char><value>̣</value></char><char><value>ά</value></char><char><value>έ</value></char><char><value>ί</value></char><char><value>α</value></char><char><value>β</value></char><char><value>γ</value></char><char><value>η</value></char><char><value>ι</value></char><char><value>κ</value></char><char><value>λ</value></char><char><value>μ</value></char><char><value>ν</value></char><char><value>ξ</value></char><char><value>ο</value></char><char><value>π</value></char><char><value>ρ</value></char><char><value>τ</value></char><char><value>ώ</value></char><char><value>،</value></char><char><value>؟</value></char><char><value>ء</value></char><char><value>آ</value></char><char><value>أ</value></char><char><value>إ</value></char><char><value>ئ</value></char><char><value>ا</value></char><char><value>ب</value></char><char><value>ة</value></char><char><value>ت</value></char><char><value>ث</value></char><char><value>ج</value></char><char><value>ح</value></char><char><value>خ</value></char><char><value>د</value></char><char><value>ذ</value></char><char><value>ر</value></char><char><value>ز</value></char><char><value>س</value></char><char><value>ش</value></char><char><value>ص</value></char><char><value>ض</value></char><char><value>ط</value></char><char><value>ع</value></char><char><value>غ</value></char><char><value>ف</value></char><char><value>ق</value></char><char><value>ك</value></char><char><value>ل</value></char><char><value>م</value></char><char><value>ن</value></char><char><value>ه</value></char><char><value>و</value></char><char><value>ى</value></char><char><value>ي</value></char><char><value>َ</value></char><char><value>ُ</value></char><char><value>ِ</value></char><char><value>ّ</value></char><char><value>چ</value></char><char><value>ک</value></char><char><value>ᵃ</value></char><char><value>ᵊ</value></char><char><value>ᵘ</value></char><char><value>ḅ</value></char><char><value>ḍ</value></char><char><value>ḏ</value></char><char><value>ḓ</value></char><char><value>Ḥ</value></char><char><value>ḥ</value></char><char><value>ḳ</value></char><char><value>ḷ</value></char><char><value>ṃ</value></char><char><value>ṛ</value></char><char><value>ṣ</value></char><char><value>Ṭ</value></char><char><value>ṭ</value></char><char><value>ṯ</value></char><char><value>ẉ</value></char><char><value>ẓ</value></char><char><value>ạ</value></char><char><value>ọ</value></char><char><value>​</value></char><char><value>ⁱ</value></char></specialCharacters>



</profile>