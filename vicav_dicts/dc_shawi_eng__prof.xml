<profile when="2022_04_28_11_18_54" xml:id="dictProfile" xml:space="preserve">
<addWeight>true</addWeight>

<autoKeyTranslation>true</autoKeyTranslation>
<autoSave>false</autoSave>
<autoSwitchString>{autoSwitchString}</autoSwitchString>
<basexRest>https://vle-curation.acdh.oeaw.ac.at</basexRest>
<browseInBrowserForm>true</browseInBrowserForm>
<browseInMainEditor>true</browseInMainEditor>
<bowseMultipleEntriesInBrowserForm>false</bowseMultipleEntriesInBrowserForm>
<concordPath/>
<concordLangLabels/>
<displayString>/concat(
(tei:form[1]/tei:orth)[1],
(tei:quote)[1],
" [",
(tei:gramGrp[1]/tei:gram[@type="pos"])[1],
"]"
)</displayString>
<displayXPaths>[Exclude]:    entry/fs[@type="change"]/f/symbol
[Exclude]:    cit[@type="example"]/fs[@type="change"]/f/symbol
[Exclude]:    entry/fs[@type="create"]/f/symbol
[Exclude]:    entry/sense/gramGrp
[Exclude]:    entry/sense/cit[@type="translation"][@xml:lang="de"]
[Exclude]:    entry/sense/ptr[@type="example"]
[Exclude]:    cit[@type="example"]/fs[@type="create"]/f/symbol

********************************************************************************
********************************************************************************
********************************************************************************

ID:                entry/@xml:id {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}
ID:                cit[@type="example"]/@xml:id {bg=rgb(0,0,0);color=rgb(255,255,255);lb_align=right;lb_bg=rgb(153,204,255);width=200;lb_weight=bold}
Type:              entry/form[@type="multiWordUnit"]/@type {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}
Type:              entry/form[@type="lemma"]/@type {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}

Lemma (ar-acm-x-shawi-vicav):       entry/form[@type="lemma"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
MWU (ar-acm-x-shawi-vicav):         entry/form[@type="multiWordUnit"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Var (ar-acm-x-shawi-vicav):         entry/form[@type="lemmaVariant"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}

POS:               entry/gramGrp/gram[@type="pos"] {lb_align=right;left=20;width=100;lb_weight=bold}
Gender:            entry/gramGrp/gram[@type="gender"] {lb_align=right;left=20;width=100;lb_weight=bold}
Subcat:            entry/gramGrp/gram[@type="subc"] {lb_align=right;left=20;width=100;lb_weight=bold}
Subj. pref.:       entry/gramGrp/gram[@type="subPref"] {lb_align=right;left=20;width=100;lb_weight=bold}

Root (ar-acm-x-shawi-vicav):        entry/gramGrp/gram[@type="root"][@xml:lang="ar-acm-x-shawi-vicav"] {lb_align=right;left=20;width=100;lb_weight=bold}

Bibl.:             entry/form[@type="lemma"]/bibl[@type="course"] {bg=rgb(192,255,130);lb_align=right;lb_weight=bold;left=20}
Bibl.:             entry/form[@type="multiWordUnit"]/bibl[@type="course"] {bg=rgb(192,255,130);lb_align=right;lb_weight=bold;left=20}
Bibl.:             entry/form[@type="lemma"]/bibl {bg=rgb(192,255,130);lb_align=right;lb_weight=bold;left=20}


Infl. (UN.,ar-acm-x-shawi-vicav):   entry/form[@ana="#n_unit"][@type="inflected"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (Pl.,ar-acm-x-shawi-vicav):   entry/form[@ana="#n_pl"][@type="inflected"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (Pl2.,ar-acm-x-shawi-vicav):  entry/form[@ana="#n_diptPl"][@type="inflected"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (fem.,ar-acm-x-shawi-vicav):  entry/form[@ana="#a_f"][@type="inflected"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (fem.,ar-acm-x-shawi-vicav):  entry/form[@ana="#a_f_dipt"][@type="inflected"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (Pres.,ar-acm-x-shawi-vicav): entry/form[@ana="#v_pres_sg_p3"][@type="inflected"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (VN, ar-acm-x-shawi-vicav):   entry/form[@ana="#v_vn"][@type="inflected"]/orth[@xml:lang="ar-acm-x-shawi-vicav"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Dom.:              entry/sense/usg[@type="dom"] {lb_align=right;lb_weight=bold;left=20}
Sense (de):        entry/sense/cit[@type="translation"][@xml:lang="de"]/quote {bg=rgb(135,204,253);lb_align=right;lb_bg=rgb(135,204,253);lb_weight=bold}
Sense (en):        entry/sense/cit[@type="translation"][@xml:lang="en"]/quote {bg=rgb(223,204,250);lb_align=right;lb_bg=rgb(223,204,250);lb_weight=bold}

Usg.:              entry/sense/cit[@type="translation"][@xml:lang="en"]/usg[@type="hint"] {lb_align=right;lb_weight=bold;left=20}
Usg.:              entry/sense/cit[@type="translation"][@xml:lang="de"]/usg[@type="hint"] {lb_align=right;lb_weight=bold;left=20}
Usg.:              entry/sense/usg[@xml:lang="en"] {lb_align=right;lb_weight=bold;left=20}

Arg.:              entry/sense/gramGrp/gram[@type="arguments"][@xml:lang="ar-acm-x-shawi-vicav"] {lb_align=right;lb_weight=bold;left=20}

Example ref.:      entry/sense/ptr[@type="example"]/@target {lb_align=right;lb_weight=bold;left=20}

Note:              entry/note[@type="unparsed"] {lb_align=right;lb_weight=bold}

Example (ar-acm-x-shawi-vicav):     cit[@type="example"]/quote[@xml:lang="ar-acm-x-shawi-vicav"]
Example (De):      cit[@type="example"]/cit[@type="translation"][@xml:lang="de"]/quote
Example (Eng):     cit[@type="example"]/cit[@type="translation"][@xml:lang="en"]/quote
Example (Fr):      cit[@type="example"]/cit[@type="translation"][@xml:lang="fr"]/quote</displayXPaths>
<doubleNLElements>cit,entry1,form,gramGrp,rating,re,sense,xr</doubleNLElements>
<editorFonts>Courier New</editorFonts>
<editorFontsSize>10</editorFontsSize>
<entryStyle><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://www.w3.org/1999/xhtml" xmlns:tei="http://www.tei-c.org/ns/1.0" version="1.0">

    <xsl:output method="html"/>
    <xsl:template match="/">

      <html>
        <head>
          <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
          <style type="text/css">
            table {
              border-collapse: collapse;
              background: white;
            }
            td {
              border: 1px solid black;
              padding-left: 5px;
              vertical-align: top;
            }
            
            .dvExamples {
              border: 1px solid black;
              background: rgb(210,210,255);
            }
            
            .dvArguments {
              border: 1px solid black;
              background: rgb(210,210,255);
            }
            
            .dvUsg {
              color: green;
              font-style: italic;
            }

            .tdHead {
               font-weight: bold;
               color: white;
               background: blue;
               padding-right: 5px;
               width: 100px;
            }
            
            .tdSenseHead {
               font-weight: bold;
               font-style: italic;
               color: blue;
               background: rgb(181,213,251);
               padding-right: 5px;
               width: 100px;
               text-align: right;
            }
            
            .tdSense {
               background: rgb(248,234,255);
               border-style: dotted;
            }
            
            .gramGrp {
               color: rgb(255,128,0);
               font-weight: bold;
            }

            .spArab {
               direction:rtl;
            }

            .spTrans {
               direction: rtl;
               font-style: italic;
               color: blue;
            }
            
            .spPlaceName {
               font-style: italic;
               color: green;
            }

            .spTransGerm {
               font-style: italic;
               color: rgb(180,180,180);
            }
            
            .spDef {
               font-style: italic;
               color: green;
            }

            .spDefGerm {
               font-style: italic;
               color: rgb(160,160,160);
            }
            
            .spDefTurk {
               font-style: italic;
               color: green;
            }
            
            .iTransEn {
               font-style: italic;
               color: green;
            }
            
            .iTransDe {
               font-style: italic;
               color: purple;
            }
          </style>
        </head>
        
        <body>
            <xsl:if test="//@value='released'">
               <xsl:attribute name="style">background: rgb(179,253,157)</xsl:attribute>
            </xsl:if>
            
            <xsl:for-each select="tei:div[@type='entry']">
            <xsl:for-each select="tei:cit">
               <table width="600px">
                  <xsl:if test="//tei:usg/tei:placeName">
                     <tr><td class="tdHead">Placename: </td><td><xsl:value-of select="tei:usg/tei:placeName"/></td></tr>
                  </xsl:if>
                  
                  <tr>
                     <td colspan="2"><xsl:value-of select="tei:quote"/></td>
                  </tr>
                  <xsl:for-each select="tei:cit[@type='translation']">
                     <tr>
                     
                        <td colspan="2">
                           <xsl:choose>
                             <xsl:when test="@xml:lang='de'"><span class="spTransGerm"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if></span></xsl:when>
                             <xsl:otherwise><span class="spTrans"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if></span></xsl:otherwise>
                           </xsl:choose>
                        </td>
                     </tr>
                  </xsl:for-each>
                <tr>
                   <td class="tdHead">Editors</td>
                   <td>
                      <xsl:for-each select="//tei:fs">
                         <xsl:value-of select="tei:f[@name='who']/tei:symbol/@value"/> (<xsl:value-of select="@type"/>): 
                         <xsl:value-of select="tei:f[@name='when']/tei:symbol/@value"/>
                         <xsl:if test="tei:f[@name='status']">
                            <xsl:text> (</xsl:text><xsl:value-of select="tei:f[@name='status']/tei:symbol/@value"/>)
                         </xsl:if>
                         <br/>
                      </xsl:for-each>
                   </td>
               </tr>
               </table>
            </xsl:for-each>
            
            <xsl:for-each select="tei:entry">
               <xsl:if test="not(//tei:gram[@type='synRoot']) and //tei:entry">
                  <span style="color:red">No synRoot</span><br/>
               </xsl:if>
               <xsl:if test="not(//tei:gram[@type='diaRoot']) and //tei:entry">
                  <span style="color:red">No diaRoot</span><br/>
               </xsl:if>
               <xsl:if test="string-length(//tei:gram[@type='pos'])&lt;1 and //tei:entry">
                  <span style="color:red">No pos</span><br/>
               </xsl:if>

               <table width="600px">
                  <xsl:for-each select="tei:form[@type='lemma'] | tei:form[@type='multiWordUnit'] ">
                     <tr>
                        <td class="tdHead">Lemma</td>
                        <td>
                           <xsl:value-of select="tei:orth"/><xsl:text> </xsl:text>

                           <xsl:if test="../tei:gramGrp/tei:gram[@type='pos']">
                              <span class="gramGrp">[<xsl:value-of select="../tei:gramGrp/tei:gram[@type='pos']"/>]</span>
                           </xsl:if>

                           <xsl:if test="tei:usg/tei:placeName">
                              <span class="spPlaceName"> (<xsl:value-of select="tei:usg/tei:placeName"/>)</span>
                           </xsl:if>

                           <xsl:for-each select="tei:form[@type='variant']">
                           <tr>
                              <td class="tdHead">Lemma (var.)</td>
                              <td>
                                 <xsl:if test="tei:orth"><xsl:value-of select="tei:orth"/></xsl:if> 
                                 <xsl:choose>
                                    <xsl:when test="@ana='#n_pl'"><span class="gramGrp">[plural]</span></xsl:when>
                                    <xsl:when test="@ana='#v_pres_sg_p3'"><span class="gramGrp">[present tense]</span></xsl:when>
                                 </xsl:choose>
                              </td>
                            </tr>
                           </xsl:for-each>
                        </td>
                     </tr>
                     
                           <xsl:if test="string-length(//tei:gram[@type='subc'])">
                              <tr>
                                <td class="tdHead">Subcat.</td>
                                <td><xsl:value-of select="//tei:gram[@type='subc']"/></td>
                              </tr>
                           </xsl:if>
                     
                           <xsl:if test="string-length(//tei:gram[@type='morphPatternSg'])">
                              <tr>
                                <td class="tdHead">morphPatSg</td>
                                <td><xsl:value-of select="//tei:gram[@type='morphPatternSg']"/></td>
                              </tr>
                           </xsl:if>
                     
                           <xsl:if test="string-length(//tei:gram[@type='morphPatternPl'])">
                              <tr>
                                <td class="tdHead">morphPatPl</td>
                                <td><xsl:value-of select="//tei:gram[@type='morphPatternPl']"/></td>
                              </tr>
                           </xsl:if>
                     
                        <xsl:if test="string-length(//tei:gram[@type='synRoot' or @type='diaRoot' or @type='root'])">
                           <xsl:if test="string-length(//tei:gram[@type='synRoot'])">
                              <tr>
                                <td class="tdHead">synRoot</td>
                                <td><xsl:value-of select="//tei:gram[@type='synRoot']"/></td>
                              </tr>
                           </xsl:if>
                           <xsl:if test="string-length(//tei:gram[@type='diaRoot'])">
                              <tr>
                                <td class="tdHead">diaRoot</td>
                                <td><xsl:value-of select="//tei:gram[@type='diaRoot']"/></td>
                              </tr>
                           </xsl:if>
                           <xsl:if test="string-length(//tei:gram[@type='root'])">
                              <tr>
                                <td class="tdHead">root</td>
                                <td><xsl:value-of select="//tei:gram[@type='root']"/></td>
                              </tr>
                           </xsl:if>
                        </xsl:if>
                  </xsl:for-each>

                  <xsl:for-each select="tei:form[@type='stem'] | tei:form[@type='inflected'] ">
                     <tr>
                        <td class="tdHead">
                           <xsl:if test="@type='stem'">Stem</xsl:if>
                           <xsl:if test="@type='inflected'">Infl.</xsl:if>
                        </td>
                        <td class="tdTrans">
                           <xsl:if test="tei:orth"><xsl:value-of select="tei:orth"/></xsl:if>  
                           <xsl:choose>
                               <xsl:when test="@ana='#n_pl'"><span class="gramGrp">[plural]</span></xsl:when>
                               <xsl:when test="@ana='#n_f'"><span class="gramGrp">[feminine]</span></xsl:when>
                               <xsl:when test="@ana='#adj_f'"><span class="gramGrp">[feminine]</span></xsl:when>
                               <xsl:when test="@ana='#adj_pl'"><span class="gramGrp">[plural]</span></xsl:when>
                               <xsl:when test="@ana='#v_pres_sg_p3'"><span class="gramGrp">[present tense]</span></xsl:when>
                               <xsl:otherwise><span class="gramGrp">[<xsl:value-of select="@ana"/>]</span></xsl:otherwise>
                           </xsl:choose>

                           <xsl:for-each select="tei:form[@type='variant']">
                           <tr>
                              <td class="tdHead">   (var.)</td>
                              <td>
                                 <xsl:if test="tei:orth"><span class="trans"><xsl:value-of select="tei:orth"/></span></xsl:if>
                                 
                                 <xsl:choose>
                                    <xsl:when test="@ana='#n_pl'"><span class="gramGrp">[plural]</span></xsl:when>
                                    <xsl:when test="@ana='#adj_f'"><span class="gramGrp">[feminine]</span></xsl:when>
                                    <xsl:when test="@ana='#adj_pl'"><span class="gramGrp">[plural]</span></xsl:when>
                                    <xsl:when test="@ana='#v_pres_sg_p3'"><span class="gramGrp">[present tense]</span></xsl:when>
                                 </xsl:choose>
                              </td>
                            </tr>
                            
                           </xsl:for-each>

                        </td>
                     </tr>
                     
                  </xsl:for-each>
               
                  <xsl:for-each select="tei:sense">
                     <tr>
                        <td class="tdSenseHead">
                           <xsl:if test="tei:gramGrp/tei:gram"><xsl:value-of select="tei:gramGrp/tei:gram"/></xsl:if>
                        </td>
                        
                        <td class="tdSense">
                           <xsl:for-each select="tei:def">
                              <div class="dvDef">
                                 <xsl:choose>
                                    <xsl:when test="@xml:lang='de'"><span class="spDefGerm">(<xsl:value-of select="."/>)</span></xsl:when>
                                    <xsl:when test="@xml:lang='tr'"><span class="spDefTurk">(<xsl:value-of select="."/>)</span></xsl:when>
                                    <xsl:otherwise><span class="spDef">(<xsl:value-of select="."/>)</span></xsl:otherwise>
                                 </xsl:choose>
                                 
                              </div>
                           </xsl:for-each>
                           
                           <xsl:for-each select="tei:cit[@type='translation']">
                              <div class="dvDef">
                                 <xsl:choose>
                                    <xsl:when test="@xml:lang='de'"><span class="spTransGerm"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if></span></xsl:when>
                                    <xsl:when test="@xml:lang='tr'"><span class="spDefTurk"><xsl:value-of select="tei:quote"/></span></xsl:when>
                                    <xsl:otherwise><span class="spTrans"><xsl:value-of select="tei:quote"/><xsl:if test="tei:usg"> (<xsl:value-of select="tei:usg"/>)</xsl:if></span></xsl:otherwise>
                                 </xsl:choose>
                                 
                              </div>
                           </xsl:for-each>

                           <xsl:for-each select="tei:cit[@type='example']">
                              <div class="dvExamples">
                                 <xsl:choose>
                                    <xsl:when test="@type='example'">
                                       <xsl:if test="not(tei:fs/tei:f/tei:symbol[@value='released'])"><b style="color:red">Not released: </b></xsl:if>
                                       <span class="spExample">
                                         <xsl:value-of select="tei:quote"/><i class="iTransEn">  <xsl:value-of select="tei:cit[@xml:lang='en']/tei:quote"/></i>
                                         <i class="iTransDe">  <xsl:value-of select="tei:cit[@xml:lang='de']/tei:quote"/></i>
                                       </span>
                                    </xsl:when>
                                      
                                    <xsl:when test="@type='multiWordUnit'">
                                      <span class="spMWU"><xsl:value-of select="tei:form/tei:orth"/><i class="iTrans">  <xsl:value-of select="tei/sense/tei:cit/tei:quote"/></i></span></xsl:when>
                                 </xsl:choose>
                             </div>
                           </xsl:for-each>
                           
                           <xsl:for-each select="tei:usg">
                              <div class="dvUsg"><xsl:value-of select="."/></div>
                           </xsl:for-each>
                        </td>
                     </tr>
                        
                 
               </xsl:for-each>

                <tr>
                   <td class="tdHead">Editors</td>
                   <td>
                      <xsl:for-each select="//tei:entry/tei:fs | //tei:cit/tei:fs">
                         <xsl:value-of select="tei:f[@name='who']/tei:symbol/@value"/> (<xsl:value-of select="@type"/>): 
                         <xsl:value-of select="tei:f[@name='when']/tei:symbol/@value"/>
                         <xsl:if test="tei:f[@name='status']">
                            <xsl:text> (</xsl:text><xsl:value-of select="tei:f[@name='status']/tei:symbol/@value"/>)
                         </xsl:if>
                         <br/>
                      </xsl:for-each>
                   </td>
               </tr>
               
               </table>
            </xsl:for-each>
            </xsl:for-each>
        </body>
      </html>
    </xsl:template>
</xsl:stylesheet>
<!-- Get the XML to be transformed to some other format:
  curl 'http://localhost:8984/restvle/dicts/dc_shawi_eng/entries?q=sense=wall&format=xml' | jq -r '._embedded.entries[0].entry' -->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:_="urn:_" exclude-result-prefixes="_">
  <_:output method="xml+identity"/>
  <xsl:output method="xml" indent="no"/>
  <xsl:param name="referencedEntriesSerialized"/>
  <xsl:variable name="referencedEntries" select="parse-xml-fragment($referencedEntriesSerialized)"/>
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="exists($referencedEntries/*)">
        <multipleParts>
        <xmlSource>
        <xsl:apply-templates/>
        </xmlSource>
        <param_referencedEntriesSerialized>
        <xsl:apply-templates select="$referencedEntries/*"/>
        </param_referencedEntriesSerialized>
        </multipleParts>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="@*|*|processing-instruction()|comment()">
    <xsl:copy>
      <xsl:apply-templates select="*|@*|text()|processing-instruction()|comment()"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math"
    xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
    xmlns:tei="http://www.tei-c.org/ns/1.0"
    xmlns:_="urn:_"
    exclude-result-prefixes="xs math xd tei _"
    version="3.0">
    <xsl:import href="xml-to-basex-json-xml.xsl"/>
    <xsl:param name="referencedEntriesSerialized"/>
    <xsl:variable name="referencedEntries" select="(parse-xml-fragment($referencedEntriesSerialized),root()/multipleParts/param_referencedEntriesSerialized)"/>
    <_:output method="json"/>
    <xsl:output method="xml" indent="false" omit-xml-declaration="true"/>
    
    <xsl:template match="tei:div" mode="named-object">
        <xsl:apply-templates select="* except (tei:entry, tei:cit)"/>
        <xsl:apply-templates select="(tei:entry, tei:cit)" mode="tei-cit-or-entry"/>
    </xsl:template>
    
    <xsl:template match="tei:entry" mode="tei-cit-or-entry">
        <entry type="object">
            <xsl:apply-templates select="."/>
        </entry>
    </xsl:template>
    
    <xsl:template match="tei:cit" mode="tei-cit-or-entry">
        <cit type="object">
            <xsl:apply-templates select="."/>
        </cit>
    </xsl:template>
    
    <xsl:template match="tei:ref">
        <xsl:variable name="target" select="xs:string(@target)"/>
        <xsl:choose>
            <xsl:when test="$referencedEntries//*[@xml:id = substring($target, 2)]">
                <xsl:call-template name="element-number-processing-switch">
                    <xsl:with-param name="element-group" select="$referencedEntries//*[@xml:id = substring($target, 2)]"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <ref type="object">
                    <xsl:apply-templates select="@*"/>
                    <_0024>target not found</_0024>
                </ref>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- the following templates are needed for debugging XML fetched from the API -->

    <xsl:template match="multipleParts" mode="named-object">
        <xsl:apply-templates select="xmlSource/*" mode="named-object"/>
    </xsl:template>
    
    <xsl:template match="tei:div/@*"/>
</xsl:stylesheet>
</entryStyle>
<entryTemplates>//*********************************************************//
//* ENTRY (lemma) - TEMPLATE ******************************//
//*********************************************************//
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_entry_001" xml:id="">
  <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">-</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote/>
      </cit>
    </sense>
 </entry>

<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_noun_001" xml:id="">
     <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#n_pl">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth> 
   </form>

   <gramGrp>
      <gram type="pos">noun</gram>
      <gram type="morphPatternSg" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="morphPatternPl" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote> </quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote> </quote>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote> </quote>
      </cit>
   </sense>
  </entry>
  
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_adjective_001" xml:id="">
   <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#a_f">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#a_pl">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">adjective</gram>
      <gram type="morphPatternSg" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="morphPatternPl" xml:lang="ar-acm-x-shawi-vicav">123</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav"/>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
   </sense>
</entry>

<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_verb_001" xml:id="">
   <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <form type="inflected" ana="#v_pres_sg_p3">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">verb</gram>
      <gram type="subc">I</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav"/>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav"/>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
   </sense>
</entry>
 
    <entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_adverb_001" xml:id="">
   <form type="lemma">
      <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">adverb</gram>
      <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
      <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote/>
      </cit>

      <cit type="translation" xml:lang="tr">
         <quote/>
      </cit>

   </sense>
  </entry>
  
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_lvc_001" xml:id="">
   <form type="multiWordUnit">
    <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>

   <gramGrp>
      <gram type="pos">lightVerbConstruction</gram>
   </gramGrp>

   <sense>
      <cit type="translation" xml:lang="en">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote>-</quote>

      </cit> <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
      
   </sense>

</entry>

//*********************************************************//
//* ENTRY (multiWordUnit) - TEMPLATE **********************//
//*********************************************************//
<entry xmlns="http://www.tei-c.org/ns/1.0" name="fa_mwu_001" xml:id="">
   <form type="multiWordUnit">
     <usg>
         <placeName>Harran-Urfa</placeName>
      </usg>
      <orth xml:lang="ar-acm-x-shawi-vicav">-</orth>
   </form>
   
    <gramGrp>
    <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">-</gram>
   </gramGrp>
            
    <sense>
      <cit type="translation" xml:lang="en">
         <quote>-</quote>
      </cit>

      <cit type="translation" xml:lang="de">
         <quote>-</quote>

      </cit> <cit type="translation" xml:lang="tr">
         <quote>-</quote>
      </cit>
      
   </sense>

</entry>

//*********************************************************//
//* EXAMPLE - TEMPLATE ************************************//
//*********************************************************//
<cit xmlns="http://www.tei-c.org/ns/1.0" name="fa_example_001" xml:id="" type="example">
   <usg>
      <placeName>Harran-Urfa</placeName>
   </usg>

   <quote xml:lang="ar-acm-x-shawi-vicav">-</quote>
   
   <cit type="translation" xml:lang="en">
      <quote>-</quote>
   </cit>   

   <cit type="translation" xml:lang="de">
      <quote>-</quote>
   </cit>
                                       
</cit>


//******************************************************************//
//******************************************************************//
//******************************************************************//
</entryTemplates>
<entryTemplatesNamesXPath>//tei:entry | //tei:cit</entryTemplatesNamesXPath>
<focusToEditor>false</focusToEditor>
<formatXMLData>false</formatXMLData>
<IDXPath>//tei:form[@type="lemma"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] | //tei:cit[@type="example"]/tei:quote[@xml:lang="ar-acm-x-shawi-vicav"]  | //tei:form[@type="multiWordUnit"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] | /tei:cit/tei:quote[1] </IDXPath>
<IDCount>57</IDCount>
<indexSplitCharacters/>
<insertTemplates><doc>
#adv#   <gramGrp><gram type="pos">adverb</gram></gramGrp> 
#ap#    <gram type="pos">activeParticiple</gram>  
#ad#    <gramGrp><gram type="pos">adjective</gram></gramGrp> 
#ai#    <gramGrp><gram type="pos">adjective</gram><gram type="subc">invariable</gram></gramGrp>
#cn#    <gramGrp><gram type="pos">conjunction</gram></gramGrp>
        <gramGrp><gram type="pos">elative</gram></gramGrp>
        <gramGrp><gram type="pos">interrogativeAdverb</gram></gramGrp>
        <gramGrp><gram type="pos">interjection</gram></gramGrp>
#lv#    <gramGrp><gram type="pos">lightVerbConstruction</gram></gramGrp>
#noun#  <gramGrp><gram type="pos">noun</gram></gramGrp>
#coll#  <gram type="subc">collectiveNoun</gram>
#vn#    <gramGrp><gram type="pos">verbalNoun</gram></gramGrp>
#nm#    <gramGrp><gram type="pos">numeral</gram></gramGrp>
#on#    <gramGrp><gram type="pos">ordNum</gram></gramGrp>
#pp#    <gramGrp><gram type="pos">passiveParticiple</gram></gramGrp>
#pron#  <gramGrp><gram type="pos">personalPronoun</gram></gramGrp>
        <gramGrp><gram type="pos">pluralNoun</gram></gramGrp>
#pr#    <gramGrp><gram type="pos">preposition</gram></gramGrp>
#pn#    <gramGrp><gram type="pos">properNoun</gram></gramGrp>
#tp#    <gramGrp><gram type="pos">toponym</gram></gramGrp>
#v#     <gramGrp><gram type="pos">verb</gram></gramGrp>

#fem#  <gram type="gender">feminine</gram>
#ar#   <gramGrp><gram type="arguments" xml:lang="ar-acm-x-shawi-vicav"/></gramGrp>
       <gramGrp><gram type="usg">only with verbal nouns</gram></gramGrp>
       
        <usg type="val">transitive</usg>
        <usg type="val">intransitive</usg>
        <usg type="val">ditransitive</usg>
        <usg type="val">impersonal</usg>
        <usg type="constraint">inanimates</usg>
#hn#    <usg type="hint">in a building</usg>

#syn#   <gram type="synRoot" xml:lang="ar-acm-x-shawi-vicav">{caret}</gram>
#d#     <gram type="diaRoot" xml:lang="ar-acm-x-shawi-vicav">{caret}</gram>

#3#     <form type="inflected" ana="#v_pres_sg_p3"><orth xml:lang="ar-acm-x-shawi-vicav">{caret}</orth></form> 
#fm#    <form type="inflected" ana="#n_f"><orth xml:lang="ar-acm-x-shawi-vicav">{caret}</orth></form>  
#af#    <form type="inflected" ana="#adj_f"><orth xml:lang="ar-acm-x-shawi-vicav">{caret}</orth></form>
#pl#    <form type="inflected" ana="#n_pl"><orth xml:lang="ar-acm-x-shawi-vicav">{caret}</orth></form>
#unit#  <form type="inflected" ana="#n_unit"><orth xml:lang="ar-acm-x-shawi-vicav">{caret}</orth></form>

#p#      <gram type="morphPatternSg" xml:lang="ar-acm-x-shawi-vicav">{caret}</gram> 
#ppl#     <gram type="morphPatternPl" xml:lang="ar-acm-x-shawi-vicav">{caret}</gram>

#r#     <ref>Behnstedt</ref>
#n#    <note>{caret}</note>

#vr#    <form type="variant"><orth xml:lang="ar-acm-x-shawi-vicav">{caret}</orth></form> 

        <usg type="dom">academic disciplines</usg>
#an#    <usg type="dom">anatomy</usg>
#as#    <usg type="dom">astronomy</usg>
#bi#    <usg type="dom">biology</usg>
#bt#    <usg type="dom">botany</usg>
#cl#    <usg type="dom">calendar</usg>
#ct#    <usg type="dom">city</usg>
#co#    <usg type="dom">colour</usg>
        <usg type="dom">country</usg>
        <usg type="dom">economics</usg>
        <usg type="dom">engineering</usg>
#fd#    <usg type="dom">food</usg>
#ge#    <usg type="dom">geography</usg>
        <usg type="dom">geology</usg>
        <usg type="dom">grammar</usg>
#hs#    <usg type="dom">history</usg>
#it#    <usg type="dom">IT</usg>
        <usg type="dom">law</usg>
        <usg type="dom">linguistics</usg>
#md#    <usg type="dom">medicine</usg>
        <usg type="dom">military</usg>
        <usg type="dom">music</usg>
        <usg type="dom">nautics</usg>
#pn#    <usg type="dom">plant</usg>
        <usg type="dom">physics</usg>
        <usg type="dom">politics</usg>
        <usg type="dom">psychology</usg>
#rl#    <usg type="dom">religion</usg>
        <usg type="dom">science</usg>
        <usg type="dom">sound</usg>
#sp#    <usg type="dom">sports</usg>
        <usg type="dom">tech</usg>
#zo#    <usg type="dom">zoology</usg>

        <usg type="reg">informal</usg>
#arc#   <usg type="time">archaic</usg>
        <usg type="time">old</usg>
        <usg type="time">neologism</usg>


               
        
#tu#    <note type="status">???</note>
        
#en#    <cit type="translation" xml:lang="en"><quote>{caret}</quote></cit>  
#de#    <cit type="translation" xml:lang="de"><quote>{caret}</quote></cit> 
#tr#    <cit type="translation" xml:lang="tr"><quote>{caret}</quote></cit>  

#dfe#    <def xml:lang="en">{caret}</def>
#dfd#    <def xml:lang="de">{caret}</def>
#turk#    <etym><lang>Turkish</lang></etym>
#fr#    <etym><lang>French</lang></etym>

#x#     <ptr type="example" target=""/>  
        <xr type="cf" xml:lang="ar-acm-x-shawi-vicav"/>
        <xr type="antonym"><ref xml:lang="ar-acm-x-shawi-vicav"/></xr>
        <xr type="source"><ref>H</ref></xr>
        <xr type="cf"/>
      
#mw#multiWordUnit
ana="#adj_f"
ana="#adj_pl"
</doc></insertTemplates>
<keys> 
ALT+I=increaseID
ALT+T=transDictLookUp
ALT+V=validateEntry
 
CTRL+1=goToEditor1
CTRL+2=goToEditor2
CTRL+3=goToEditor3
CTRL+4=p22Entry
CTRL+5=exampleFromLine
CTRL+6=insertTransDictData
CTRL+B=p2Entry
CTRL+D=convertDMG2Pers
CTRL+E=createExampleID
CTRL+F=goToQuery
CTRL+F3=browseEntry
CTRL+F5=insertEndTag
CTRL+G=transDictLookUp
CTRL+H=convertPers2DMG
CTRL+I=createID
CTRL+L=loadTranslationKeys
CTRL+N=newEntry
CTRL+O=deleteCurrRecord
CTRL+P=toggleKeepData
CTRL+R=target2CB
CTRL+S=saveEntry
CTRL+T=toggleReleased
CTRL+U=openSenseEditor
CTRL+W=navigWebTemplateFromEditor
 
F1=prevEntry
F2=saveEntry,nextEntry
F3=formatEntry,browseEntry
//F4=saveEntry,nextEntry
F4=goToTranscriber
F5=insertCBInNextEle(quote|orth),formatEntry
F6=showTextTemplates
F7=goToQuickQuery
F8=insertTemplateString
F9=selectElement
F11=createExamplePointer
//F11=idToCB
F12=switchToNoTagsTabsheet
//F12=transformActEntry2Editor,replaceStringInEntry(wkp:,),replaceStringInEntry(xmlns:wkp="urn:general",),replaceStringInEntry(,),deleteNamespace(ignoreFirstLine),formatEntry,browseEntry 

</keys>
<keyTranslations>//translation assignments
//Don't use wide strings here, make use of character references!
//xml:lang=ar-acm-x-shawi-vicav
e* = ė //e with dot on top

A = ā
c = ʕ
C = č
D = ḍ
E = ē
G = ġ
H = ḥ
I = ī
j = š      //shin
J = ǧ      //djim
L = ḷ
ö = ə
Ö = ᵊ
O = ō     
P = ḏ     //z + _
R = ṛ
S = ṣ
T = ṭ
U = ū
V = ṯ
X = ḓ     
vv = s̠
Z = ẓ
? = ʔ
~ = °
-- = ˗
'' = ’

a_ = â
d_ = ḏ
h_ = ḫ
s_ = s̠     //s + _
t_ = ṯ
z_ = ẕ

a+ = ã
' = ’

a# = ậ
ʕ# = č   //tsche alternative
e# = ë
g# = ǧ   //djim alternative
s# = š   //shin alternative
y# = ậ
z# = ž   //zhe alternative
//
</keyTranslations>
<lemmaXPath>//tei:form[@type="lemma"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] || //tei:form[@type="multiWordUnit"]/tei:orth[@xml:lang="ar-acm-x-shawi-vicav"] || //tei:cit[@type="example"]/tei:quote[@xml:lang="ar-acm-x-shawi-vicav"]</lemmaXPath>
<listBoxFonts>Arial Unicode MS</listBoxFonts>
<listBoxFontsSize/>
<mainLangLabel>ar-acm-x-shawi-vicav</mainLangLabel>
<maxUnderscoresInID>3</maxUnderscoresInID>
<multipleEntriesStyle><multipleEntriesStyle/></multipleEntriesStyle>
<noDashesIndex>true</noDashesIndex>
<pointerTemplates><ptr type="example" target="{target}"/></pointerTemplates>
<queryTemplates>

<queryTemplate label="ft_all">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/.//node()[text() contains text "{subQuery}" using wildcards] | 
   collection($__db__)//tei:cit[@type='example']//tei:quote[text() contains text "{subQuery}" using wildcards]
</queryTemplate>

<queryTemplate label="ft_all_complete" type="complete">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/.//node()[text() contains text "{subQuery}" using wildcards] | 
   collection($__db__)//tei:cit[@type='example']/tei:quote[text() contains text "{subQuery}" using wildcards]
</queryTemplate>

<queryTemplate label="ft_lem">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:form[@type='lemma']/tei:orth[text() contains text "{subQuery}" using wildcards] |
   collection($__db__)//tei:entry/tei:form[@type='multiWordUnit']/tei:orth[text() contains text "{subQuery}" using wildcards]
</queryTemplate>

<queryTemplate label="ft_sid">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/@xml:id[{subQuery}]/.. | 
   collection($__db__)//tei:teiHeader/@xml:id[{subQuery}]/.. | 
   collection($__db__)//tei:cit/@xml:id[{subQuery}]/..
</queryTemplate>

<queryTemplate label="ft_pos">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry[tei:gramGrp/tei:gram[@type='pos'][{subQuery}]]
</queryTemplate>

<queryTemplate label="ft_tr">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:sense/tei:cit/tei:quote[text() contains text "{subQuery}" using wildcards]
</queryTemplate>

<queryTemplate label="ft_ex">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:cit[@type='example']/tei:quote[text() contains text "{subQuery}" using wildcards] |
   collection($__db__)//tei:cit[@type='example']/tei:cit/tei:quote[text() contains text "{subQuery}" using wildcards]  
</queryTemplate>                                                       
                                                     
</queryTemplates>
<requestContentType>application/xml</requestContentType>
<requestTransferEncoding/>
<respString><fs type="change"><f name="who"><symbol value="{who}"/></f><f name="when"><symbol value="{date}"/></f></fs></respString>
<resultSelector/>
<showEditorNoTagsTabsheet>false</showEditorNoTagsTabsheet>
<showProfileTabsheet>false</showProfileTabsheet>
<singleNLElements>bibl,colloc,date,def,entry,etym,fs,gen,gram,mood,
note,orth,p,per,pos,quote,number,subc,text,tns,usg,user</singleNLElements>
<sortedDisplay>true</sortedDisplay>
<statusProt>(status)</statusProt>
<tableName label="dc_shawi_eng">dc_shawi_eng</tableName>
<tempPath>C:\dicttemp</tempPath>
<tieTo/>
<URLtemplate/>
<urlTemplates/></profile>
