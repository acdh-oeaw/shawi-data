<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:s="http://purl.oclc.org/dsdl/schematron">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>Shawi Dictionary Schema</title>
            <author>Charly MÃ¶rth</author>
            <author>Daniel Schopper</author>
         </titleStmt>
         <publicationStmt>
            <publisher>Austrian Centre for Digital Humanities and Cultural Heritage</publisher>
            <date>2024</date>
         </publicationStmt>
         <sourceDesc>
            <p>This ODD is a customization of TEI Lex-0, adapted for the needs of the SHAWI-Project of the ACDH-CH.</p>
         </sourceDesc>
      </fileDesc>
      <revisionDesc>
         <change status="draft" when="2024-03-01">set up ODD</change>
      </revisionDesc>
   </teiHeader>
   <text>
      <front>
         <argument>
            <p>This TEI customization fits the needs of the SHAWI-Project while conforming with the baseline schema of all dictionaries created at the ACDH-CH.</p>
         </argument>
      </front>
      <body>
         <head>Part 1: Encoder Documentation</head>
         <div>
            <head>Basic Dictionary Structure</head>
            <p>The dictionaries covered by this schema are encoded according to the Guidelines of the Text Encoding Initiative (P5). They are conceptualised as a specific type of text and are therefore encoded with <gi>text</gi> elements. Each dictionary starts with a <gi>teiHeader</gi> element which contains the metadata of the dictionary.</p>
            
            <p>The lexicographic data are placed in typed <gi>div</gi> elements. Thus, our TEI dictionaries basically look like this:</p>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="feasible">
               <TEI version="5.0">
                  <teiHeader>
                     ...
                  </teiHeader>
                  <text>
                     <body>
                        <div type="entries">
                           <entry>...</entry>
                           <entry>...</entry>
                           <entry>...</entry>
                        </div>
                     </body>
                  </text>
               </TEI>
            </egXML>
            
            <p>The <gi>body</gi> of a dictionary which conforms to this specification may not only contain a flat series of entries but also examples (which are encoded as <gi>cit</gi>/<gi>quote</gi> constructs). The rationale behind keeping example sentences outside the entries is to be able to reuse them in different parts of the dictionary (See below: <ref target="#examples">Examples and Creating examples</ref>).</p>
            
            <elementSpec ident="body" mode="change">
               <desc>The main body of the dictionary. MUST include a <gi>div</gi> of type <val>entries</val> and MAY include a <gi>div</gi> of type <val>examples</val>.</desc>
               <content>
                  <elementRef key="div" minOccurs="1" maxOccurs="2"/>
               </content>
               <constraintSpec ident="body-children" scheme="schematron">
                  <desc>assert typed div elements at the top of body</desc>
                  <constraint>
                     <s:rule context="tei:body">
                        <s:assert test="exists(tei:div[@type = 'entries'])">body must contain a div of type "entries".</s:assert>
                     </s:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
            
            <elementSpec ident="div" module="core" mode="change">
               <constraintSpec ident="div-example-children" scheme="schematron">
                  <desc>assert content of top-level divisions</desc>
                  <constraint>
                     <s:rule context="tei:div[@type = 'examples']">
                        <s:assert test="every $e in * satisfies $e/self::tei:cit[@type = 'example']">div type="examples" may only contain cit type="example"</s:assert>
                     </s:rule>
                     <s:rule context="tei:div[@type = 'entries']">
                        <s:assert test="every $e in * satisfies $e/self::tei:entry">div type="entries" may only contain entry elements</s:assert>
                     </s:rule>
                  </constraint>
               </constraintSpec>
               <attList>
                  <attDef ident="type" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="entries">
                           <desc>contains all entries in a dictionary</desc>
                        </valItem>
                        <valItem ident="examples">
                           <desc>contains examples used in the dictionary</desc>
                        </valItem>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
         </div>
         <div>
            <head>Part 2: Formal Specification</head>
            
            <schemaSpec ident="shawi" source="file:/C:/Users/mrauschsupola/generic-dict-schema/generic-dict-schema/schema/acdh-ch-dicts.compiled.odd">
            <!-- We copy all modules from TEI Lex0  -->
            <moduleRef key="analysis"/>
            <moduleRef key="core"/>
            <moduleRef key="dictionaries"/>
            <moduleRef key="figures"/>
            <moduleRef key="gaiji"/>
            <moduleRef key="header"/>
            <moduleRef key="linking"/>
            <moduleRef key="namesdates"/>
            <moduleRef key="tei"/>
            <moduleRef key="textstructure"/>
            <moduleRef key="transcr"/>
            
            <!-- Additionally needed elements -->
            <elementRef key="list" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="item" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <!-- WATCHME If I don't redefine the content model of list here, the resulting XML 
               schema is violating the Unique particle attribution. We should find out, why. 
               2021-12-11 -->
            <elementSpec ident="list" mode="change">
               <content>
                  <sequence>
                     <classRef key="model.divTop" minOccurs="0"/>
                     <sequence minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="label" minOccurs="0"/>
                        <elementRef key="item" minOccurs="1" maxOccurs="1"/>
                     </sequence>
                  </sequence>
               </content>
            </elementSpec>
            
            <elementRef key="fs" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="f" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="symbol" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="measure" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="listChange" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="change" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="ptr" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="interpretation" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>   
            
            <classSpec ident="change" mode="change" module="tei" type="atts">
               <attList>
                  <attDef ident="calendar" mode="delete"/>
               </attList>
            </classSpec>
            <!-- 
               TODO We should have a finer-grained definition for <usg type="corpusFrequency">
               For the time being, I'm simply adding <q> and <val>.
               DS 2021-12-02
            -->
            <elementRef key="q" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>   
            <elementRef key="val" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>   

            <!-- TODO are we sure we want <mentioned> and <lb/> ? DS 2021-12-02-->
            <elementRef key="mentioned" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementRef key="lb" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            
            <!-- 
               for some reason I had to explicitly add model.featureVal
               and make <symbol> a member of it. We should find out why. 
               DS 2021-12-02 
            -->
            <classRef key="model.featureVal" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            <elementSpec ident="symbol" mode="change">
               <classes mode="change">
                  <memberOf key="model.featureVal"/>
               </classes>
            </elementSpec>
            
            <classRef key="att.measurement" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
            
            <elementSpec ident="ptr" mode="change" module="core">
               <constraintSpec ident="example-target" scheme="schematron">
                  <desc>rules that govern ptr elements</desc>
                  <constraint>
                     <s:rule context="tei:ptr[@type = 'example'][matches(@target,'^#') and not(contains(@target,' '))]">
                        <s:assert test="exists(root()//tei:cit[@type = 'example'][@xml:id = current()/substring-after(@target,'#')])">unknown example with id "<s:value-of select="current()/substring-after(@target,'#')"/>"</s:assert>
                     </s:rule>
                     <s:rule context="tei:ptr[@type = 'example'][not(matches(@target,'^#')) or contains(@target,' ')]">
                        <s:report test="count(tokenize(@target,'\s')[.!='']) > 1">only one pointer allowed in @target</s:report>
                        <s:report test="not(starts-with(normalize-space(@target),'#'))">unexpected value "<s:value-of select="current()/@target"/>": the value of @target must be a fragment identifier pointing to an xml:id of a dictionary example (tei:cit[@type='example'])</s:report>
                     </s:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
            
            <elementSpec ident="seg" mode="change" module="linking">
               <constraintSpec ident="seg-context" scheme="schematron">
                  <desc> assert correct context of seg</desc>
                  <constraint>
                     <s:rule context="tei:seg[@type = 'hint']">
                        <s:assert test="parent::tei:quote[parent::tei:cit[@type = 'translation']]">a hint segment must be inside a translation equivalent</s:assert>
                     </s:rule>
                  </constraint>
               </constraintSpec>
               <attList>
                  <attDef ident="type" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="hint">
                           <desc>a hint in a translation to narrow down the semantic scope of the particular item.</desc>  
                        </valItem>
                        <valItem ident="constrPart">
                           <desc>TODO add description ???</desc>
                        </valItem>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            
            
            <elementSpec ident="gram" mode="change" module="dictionaries">
               <attList>
                  <!-- TODO 2021-12-03 
                     Vocabularies should be moved to specific implementations. 
                     Also this one? 
                  -->
                  <attDef ident="type" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="arguments">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="aspect">
                           <desc>TODO description missing</desc>
                        </valItem>                        
                        <valItem ident="constraint">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="diaRoot">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="diaRootNew">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="gender">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="inflectionType">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="morphPatternPl">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="morphPatternSg">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="nominalState">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="number">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="person">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="pos">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="root">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="subc">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="synRoot">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="translationEquivalent">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="usg">
                           <desc>hint on usage</desc>
                        </valItem>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>            
            
            
            <elementSpec ident="cit" mode="change" module="core">
               <content>
                  <alternate minOccurs="1" maxOccurs="unbounded">
                     <!-- both examples or translations have their textual content enclosed in quote elements -->
                     <elementRef key="quote" minOccurs="1" maxOccurs="1"/>
                     <!-- example entries may have 1ân nested translations -->
                     <elementRef key="cit" minOccurs="0" maxOccurs="unbounded"/>
                     <!-- change history of example entries  -->
                     <elementRef key="fs"/>
                     <!-- only  -->
                     <elementRef key="bibl"/>
                     <elementRef key="note"/>
                     <elementRef key="sense"/>
                     <elementRef key="usg"/>
                     <elementRef key="xr"/>
                     <elementRef key="def"/>
                     <elementRef key="ptr"/>
                     <elementRef key="form"/>
                     <elementRef key="ref"/>
                     <elementRef key="gramGrp"/>
                  </alternate>
               </content>
               <constraintSpec ident="cit-context" scheme="schematron">
                  <desc>assert correct context of cit types</desc>
                  <constraint>
                     <s:rule context="tei:cit[@type = 'translation']">
                        <s:report test="* except (tei:quote|tei:usg[@type = 'hint']|tei:bibl)">a translation equivalent may only contain 1) the translated text in a quote element, 2) a usage hint and/or 3) a bibliographic reference to the source of the translation.</s:report>
                     </s:rule>
                     <s:rule context="tei:entry//tei:cit[@type = 'translation']">
                        <s:assert test="parent::tei:sense">a translation equivalent in a headword or MWU entry must be a direct child of a sense element</s:assert>
                     </s:rule>
                     <s:rule context="tei:cit[@subtype = 'proverb']">
                        <s:assert test="@type = 'example'">unexpected value "<s:value-of select="current()/@type"/>" in @type â a proverb must be encoded as cit type="example" subtype="proverb"</s:assert>
                     </s:rule>
                  </constraint>
               </constraintSpec>
               <attList>
                  <attDef ident="type" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="example">
                           <desc>A dictionary example. Ideally, examples should consist in complete sentences. Examples should be concise, but can also contain several sentences. If dialogical models are involved, sentences are to be separated by a dash.</desc>
                        </valItem>
                        <valItem ident="translation">
                           <desc>A translation equivalent.</desc>
                        </valItem>
                        <valItem ident="translationEquivalent">
                           <desc>A translation equivalent.</desc>
                        </valItem>
                        <valItem ident="etymon">
                           <desc>A translation equivalent.</desc>
                        </valItem>
                     </valList>
                  </attDef>
                  <attDef ident="subtype" mode="replace" usage="opt">
                     <valList type="closed">
                        <valItem ident="proverb">
                           <desc>Proverbs are a subtype of example.</desc>
                        </valItem>
                        <valItem ident="verbatim">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="scientificName">
                           <desc>TODO descripion missing</desc>
                        </valItem>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            
            <elementSpec ident="form" mode="change" module="dictionaries">
               <constraintSpec ident="form-type" scheme="schematron">
                  <desc>assert content of correct context of @type values</desc>
                  <constraint>
                     <s:rule context="tei:form[not(@type)]">
                        <s:assert test="parent::tei:cit">a headword must be a direct child of an entry element. </s:assert>
                     </s:rule>
                     <s:rule context="tei:form[@type = 'variant']">
                        <s:assert test="parent::tei:form[@type = ('lemma','multiWordUnit', 'inflected')]">a variant must be a direct child of the main form (type = "lemma", "multiWordUnit" or "inflected").</s:assert>
                     </s:rule>
                     <s:rule context="tei:form[@type = 'lemma']">
                        <s:assert test="parent::tei:entry">a headword must be a direct child of an entry element. </s:assert>
                     </s:rule>
                  </constraint>
               </constraintSpec>
               <attList>
                  <!-- TODO In Zulu , there are <form>s without @type inside 
                     of cit type translation 
                     HOW TO treat? 2021-12-11 DS
                  -->
                  <attDef ident="type" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="lemma">
                           <desc>the headword of a lemma entry</desc>
                        </valItem>
                        <valItem ident="multiWordUnit">
                           <desc>the headword of a MWU entry</desc>
                        </valItem>
                        
                        <valItem ident="inflected">
                           <desc>inflected form</desc>
                        </valItem>
                        <!-- WHAT IS @type='infl' ? 
                    121 in baghdad dict, many empty orth elements
                    112 in apc
                -->
                        <!--<valItem ident="infl">
                    <desc>????</desc>
                </valItem>-->
                        
                        
                        <!-- WHEN IS THIS USED ? 16 instances in damascus dict  -->
                        <valItem ident="example">
                           <desc>???</desc>
                        </valItem>
                        
                        <valItem ident="variant">
                           <desc>A variant form of the lemma. Only headwords may have variants. All other variants â e.g. competing morphological forms â are simply listed but not classified. Variants can be assigned usage labels indicating e.g. a particular register. The more frequent variant should precede less frequent ones. </desc>
                        </valItem>
                        
                        <valItem ident="stem">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                        <valItem ident="derived">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                        <!-- in how far is @type = "lemmaVariant" different from @type = 'variant'? -->
                        <valItem ident="lemmaVariant">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                        <!-- WHEN IS THIS USED ?? -->
                        <valItem ident="construction">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                        <valItem ident="VN">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                        <valItem ident="infinitive">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                        <valItem ident="adverbial">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                       
                        <valItem ident="abbreviation">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                       
                        <!-- TODO DS 2021-12-02 
                           These @types look complex â we should describe why 
                           they are different from the other "flat" values -->
                        <valItem ident="lexicalType:adverb">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="lexicalType:infinitive">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="lexicalType:infinitiveLocative">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="grammaticalCase:genitive">
                           <desc>TODO description missing</desc>
                        </valItem>
                        <valItem ident="grammaticalCase:vocative">
                           <desc>TODO description missing</desc>
                        </valItem>
                        
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
         </schemaSpec>
         </div>
      </body>
   </text>
</TEI>
